// !(function () {
// 	var t = {
// 			3578: function (t, e, n) {
// 				var o = n(3745),
// 					i = n(2178).each;
// 				function s(t, e) {
// 					(this.query = t),
// 						(this.isUnconditional = e),
// 						(this.handlers = []),
// 						(this.mql = window.matchMedia(t));
// 					var n = this;
// 					(this.listener = function (t) {
// 						(n.mql = t.currentTarget || t), n.assess();
// 					}),
// 						this.mql.addListener(this.listener);
// 				}
// 				(s.prototype = {
// 					constuctor: s,
// 					addHandler: function (t) {
// 						var e = new o(t);
// 						this.handlers.push(e), this.matches() && e.on();
// 					},
// 					removeHandler: function (t) {
// 						var e = this.handlers;
// 						i(e, function (n, o) {
// 							if (n.equals(t))
// 								return n.destroy(), !e.splice(o, 1);
// 						});
// 					},
// 					matches: function () {
// 						return this.mql.matches || this.isUnconditional;
// 					},
// 					clear: function () {
// 						i(this.handlers, function (t) {
// 							t.destroy();
// 						}),
// 							this.mql.removeListener(this.listener),
// 							(this.handlers.length = 0);
// 					},
// 					assess: function () {
// 						var t = this.matches() ? "on" : "off";
// 						i(this.handlers, function (e) {
// 							e[t]();
// 						});
// 					},
// 				}),
// 					(t.exports = s);
// 			},
// 			6779: function (t, e, n) {
// 				var o = n(3578),
// 					i = n(2178),
// 					s = i.each,
// 					r = i.isFunction,
// 					c = i.isArray;
// 				function l() {
// 					if (!window.matchMedia)
// 						throw new Error(
// 							"matchMedia not present, legacy browsers require a polyfill"
// 						);
// 					(this.queries = {}),
// 						(this.browserIsIncapable =
// 							!window.matchMedia("only all").matches);
// 				}
// 				(l.prototype = {
// 					constructor: l,
// 					register: function (t, e, n) {
// 						var i = this.queries,
// 							l = n && this.browserIsIncapable;
// 						return (
// 							i[t] || (i[t] = new o(t, l)),
// 							r(e) && (e = { match: e }),
// 							c(e) || (e = [e]),
// 							s(e, function (e) {
// 								r(e) && (e = { match: e }), i[t].addHandler(e);
// 							}),
// 							this
// 						);
// 					},
// 					unregister: function (t, e) {
// 						var n = this.queries[t];
// 						return (
// 							n &&
// 								(e
// 									? n.removeHandler(e)
// 									: (n.clear(), delete this.queries[t])),
// 							this
// 						);
// 					},
// 				}),
// 					(t.exports = l);
// 			},
// 			3745: function (t) {
// 				function e(t) {
// 					(this.options = t), !t.deferSetup && this.setup();
// 				}
// 				(e.prototype = {
// 					constructor: e,
// 					setup: function () {
// 						this.options.setup && this.options.setup(),
// 							(this.initialised = !0);
// 					},
// 					on: function () {
// 						!this.initialised && this.setup(),
// 							this.options.match && this.options.match();
// 					},
// 					off: function () {
// 						this.options.unmatch && this.options.unmatch();
// 					},
// 					destroy: function () {
// 						this.options.destroy
// 							? this.options.destroy()
// 							: this.off();
// 					},
// 					equals: function (t) {
// 						return this.options === t || this.options.match === t;
// 					},
// 				}),
// 					(t.exports = e);
// 			},
// 			2178: function (t) {
// 				t.exports = {
// 					isFunction: function (t) {
// 						return "function" == typeof t;
// 					},
// 					isArray: function (t) {
// 						return (
// 							"[object Array]" ===
// 							Object.prototype.toString.apply(t)
// 						);
// 					},
// 					each: function (t, e) {
// 						for (
// 							var n = 0, o = t.length;
// 							n < o && !1 !== e(t[n], n);
// 							n++
// 						);
// 					},
// 				};
// 			},
// 			1179: function (t, e, n) {
// 				var o = n(6779);
// 				t.exports = new o();
// 			},
// 		},
// 		e = {};
// 	function n(o) {
// 		var i = e[o];
// 		if (void 0 !== i) return i.exports;
// 		var s = (e[o] = { exports: {} });
// 		return t[o](s, s.exports, n), s.exports;
// 	}
// 	(n.n = function (t) {
// 		var e =
// 			t && t.__esModule
// 				? function () {
// 						return t.default;
// 				  }
// 				: function () {
// 						return t;
// 				  };
// 		return n.d(e, { a: e }), e;
// 	}),
// 		(n.d = function (t, e) {
// 			for (var o in e)
// 				n.o(e, o) &&
// 					!n.o(t, o) &&
// 					Object.defineProperty(t, o, { enumerable: !0, get: e[o] });
// 		}),
// 		(n.o = function (t, e) {
// 			return Object.prototype.hasOwnProperty.call(t, e);
// 		}),
// 		(function () {
// 			"use strict";
// 			var t = "data-section-id";
// 			function e(e, n) {
// 				(this.container = (function (e) {
// 					if (!(e instanceof Element))
// 						throw new TypeError(
// 							"Theme Sections: Attempted to load section. The section container provided is not a DOM element."
// 						);
// 					if (null === e.getAttribute(t))
// 						throw new Error(
// 							"Theme Sections: The section container provided does not have an id assigned to the data-section-id attribute."
// 						);
// 					return e;
// 				})(e)),
// 					(this.id = e.getAttribute(t)),
// 					(this.extensions = []),
// 					Object.assign(
// 						this,
// 						(function (t) {
// 							if (
// 								(void 0 !== t && "object" != typeof t) ||
// 								null === t
// 							)
// 								throw new TypeError(
// 									"Theme Sections: The properties object provided is not a valid"
// 								);
// 							return t;
// 						})(n)
// 					),
// 					this.onLoad();
// 			}
// 			(e.prototype = {
// 				onLoad: Function.prototype,
// 				onUnload: Function.prototype,
// 				onSelect: Function.prototype,
// 				onDeselect: Function.prototype,
// 				onBlockSelect: Function.prototype,
// 				onBlockDeselect: Function.prototype,
// 				extend: function (t) {
// 					this.extensions.push(t);
// 					var e = Object.assign({}, t);
// 					delete e.init,
// 						Object.assign(this, e),
// 						"function" == typeof t.init && t.init.apply(this);
// 				},
// 			}),
// 				"function" != typeof Object.assign &&
// 					Object.defineProperty(Object, "assign", {
// 						value: function (t) {
// 							if (null == t)
// 								throw new TypeError(
// 									"Cannot convert undefined or null to object"
// 								);
// 							for (
// 								var e = Object(t), n = 1;
// 								n < arguments.length;
// 								n++
// 							) {
// 								var o = arguments[n];
// 								if (null != o)
// 									for (var i in o)
// 										Object.prototype.hasOwnProperty.call(
// 											o,
// 											i
// 										) && (e[i] = o[i]);
// 							}
// 							return e;
// 						},
// 						writable: !0,
// 						configurable: !0,
// 					});
// 			var o = "data-section-type";
// 			(window.Shopify = window.Shopify || {}),
// 				(window.Shopify.theme = window.Shopify.theme || {}),
// 				(window.Shopify.theme.sections =
// 					window.Shopify.theme.sections || {});
// 			var i = (window.Shopify.theme.sections.registered =
// 					window.Shopify.theme.sections.registered || {}),
// 				s = (window.Shopify.theme.sections.instances =
// 					window.Shopify.theme.sections.instances || []);
// 			function r(t, e) {
// 				(t = a(t)),
// 					void 0 === e &&
// 						(e = document.querySelectorAll("[data-section-type]")),
// 					(e = d(e)),
// 					t.forEach(function (t) {
// 						var n = i[t];
// 						void 0 !== n &&
// 							(e = e.filter(function (e) {
// 								return (
// 									!(c(e).length > 0) &&
// 									null !== e.getAttribute(o) &&
// 									(e.getAttribute(o) !== t ||
// 										(s.push(new n(e)), !1))
// 								);
// 							}));
// 					});
// 			}
// 			function c(t) {
// 				var e = [];
// 				if (NodeList.prototype.isPrototypeOf(t) || Array.isArray(t))
// 					var n = t[0];
// 				if (t instanceof Element || n instanceof Element)
// 					d(t).forEach(function (t) {
// 						e = e.concat(
// 							s.filter(function (e) {
// 								return e.container === t;
// 							})
// 						);
// 					});
// 				else if ("string" == typeof t || "string" == typeof n) {
// 					a(t).forEach(function (t) {
// 						e = e.concat(
// 							s.filter(function (e) {
// 								return e.type === t;
// 							})
// 						);
// 					});
// 				}
// 				return e;
// 			}
// 			function l(t) {
// 				for (var e, n = 0; n < s.length; n++)
// 					if (s[n].id === t) {
// 						e = s[n];
// 						break;
// 					}
// 				return e;
// 			}
// 			function a(t) {
// 				return (
// 					"*" === t
// 						? (t = Object.keys(i))
// 						: "string" == typeof t
// 						? (t = [t])
// 						: t.constructor === e
// 						? (t = [t.prototype.type])
// 						: Array.isArray(t) &&
// 						  t[0].constructor === e &&
// 						  (t = t.map(function (t) {
// 								return t.prototype.type;
// 						  })),
// 					(t = t.map(function (t) {
// 						return t.toLowerCase();
// 					}))
// 				);
// 			}
// 			function d(t) {
// 				return (
// 					NodeList.prototype.isPrototypeOf(t) && t.length > 0
// 						? (t = Array.prototype.slice.call(t))
// 						: (NodeList.prototype.isPrototypeOf(t) &&
// 								0 === t.length) ||
// 						  null === t
// 						? (t = [])
// 						: !Array.isArray(t) &&
// 						  t instanceof Element &&
// 						  (t = [t]),
// 					t
// 				);
// 			}
// 			function h(t, e, n) {
// 				return (
// 					e in t
// 						? Object.defineProperty(t, e, {
// 								value: n,
// 								enumerable: !0,
// 								configurable: !0,
// 								writable: !0,
// 						  })
// 						: (t[e] = n),
// 					t
// 				);
// 			}
// 			window.Shopify.designMode &&
// 				(document.addEventListener(
// 					"shopify:section:load",
// 					function (t) {
// 						var e = t.detail.sectionId,
// 							n = t.target.querySelector(
// 								'[data-section-id="' + e + '"]'
// 							);
// 						null !== n && r(n.getAttribute(o), n);
// 					}
// 				),
// 				document.addEventListener(
// 					"shopify:section:unload",
// 					function (t) {
// 						var e = t.detail.sectionId,
// 							n = t.target.querySelector(
// 								'[data-section-id="' + e + '"]'
// 							);
// 						"object" == typeof c(n)[0] &&
// 							c(n).forEach(function (t) {
// 								var e = s
// 									.map(function (t) {
// 										return t.id;
// 									})
// 									.indexOf(t.id);
// 								s.splice(e, 1), t.onUnload();
// 							});
// 					}
// 				),
// 				document.addEventListener(
// 					"shopify:section:select",
// 					function (t) {
// 						var e = l(t.detail.sectionId);
// 						"object" == typeof e && e.onSelect(t);
// 					}
// 				),
// 				document.addEventListener(
// 					"shopify:section:deselect",
// 					function (t) {
// 						var e = l(t.detail.sectionId);
// 						"object" == typeof e && e.onDeselect(t);
// 					}
// 				),
// 				document.addEventListener("shopify:block:select", function (t) {
// 					var e = l(t.detail.sectionId);
// 					"object" == typeof e && e.onBlockSelect(t);
// 				}),
// 				document.addEventListener(
// 					"shopify:block:deselect",
// 					function (t) {
// 						var e = l(t.detail.sectionId);
// 						"object" == typeof e && e.onBlockDeselect(t);
// 					}
// 				));
// 			const u = (t) => {
// 				let {
// 					context: e = document.documentElement,
// 					event: n = "click",
// 					selector: o,
// 					handler: i,
// 					capture: s = !1,
// 				} = t;
// 				const r = function (t) {
// 					for (let e = t.target; e && e !== this; e = e.parentNode)
// 						if (e.matches(o)) {
// 							i.call(e, t, e);
// 							break;
// 						}
// 				};
// 				return (
// 					e.addEventListener(n, r, s),
// 					() => {
// 						e.removeEventListener(n, r, s);
// 					}
// 				);
// 			};
// 			class p {
// 				constructor(t) {
// 					let e =
// 						arguments.length > 1 && void 0 !== arguments[1]
// 							? arguments[1]
// 							: this.defaultOptions;
// 					h(this, "defaultOptions", {
// 						presetContentHeight: !1,
// 						duration: 300,
// 						callback: () => {},
// 					}),
// 						h(this, "selectors", {
// 							items: [".sf__accordion-item"],
// 							buttons: [".sf__accordion-button"],
// 							contents: [".sf__accordion-content"],
// 						}),
// 						h(this, "openClass", "open"),
// 						h(this, "initClass", "acc-initialized"),
// 						h(this, "removeEvents", null),
// 						h(this, "destroy", () => {
// 							this.removeEvents(),
// 								window.removeEventListener(
// 									"resize",
// 									this.debouncedSetContentHeight
// 								);
// 						}),
// 						h(this, "setContentOpacity", () => {
// 							this.domNodes.contents.forEach(
// 								(t) => (t.style.opacity = 1)
// 							);
// 						}),
// 						h(this, "setItemOverflowState", () => {
// 							var t, e;
// 							null === (t = this.domNodes) ||
// 								void 0 === t ||
// 								null === (e = t.items) ||
// 								void 0 === e ||
// 								e.forEach((t, e) => {
// 									var n, o, i, s, r, c;
// 									let l =
// 										null === (n = this.domNodes) ||
// 										void 0 === n ||
// 										null === (o = n.contents) ||
// 										void 0 === o
// 											? void 0
// 											: o[e];
// 									const a =
// 										null != t &&
// 										null !== (i = t.classList) &&
// 										void 0 !== i &&
// 										null !== (s = i.contains) &&
// 										void 0 !== s &&
// 										s.call(i, this.openClass)
// 											? "remove"
// 											: "add";
// 									null == l ||
// 										null === (r = l.classList) ||
// 										void 0 === r ||
// 										null === (c = r[a]) ||
// 										void 0 === c ||
// 										c.call(r, "overflow-hidden");
// 								});
// 						}),
// 						h(this, "setContentHeight", () => {
// 							this.domNodes = queryDomNodes(
// 								this.selectors,
// 								this.container
// 							);
// 							const { items: t, contents: e } = this.domNodes;
// 							t.forEach((t, n) => {
// 								var o, i;
// 								if (
// 									null != t &&
// 									t.classList.contains(this.openClass)
// 								) {
// 									var s, r, c;
// 									null == t ||
// 										null === (s = t.style) ||
// 										void 0 === s ||
// 										s.setProperty(
// 											"--content-max-height",
// 											"auto"
// 										);
// 									const o =
// 										null == e ||
// 										null === (r = e[n]) ||
// 										void 0 === r
// 											? void 0
// 											: r.scrollHeight;
// 									null == t ||
// 										null === (c = t.style) ||
// 										void 0 === c ||
// 										c.setProperty(
// 											"--content-max-height",
// 											`${o}px`
// 										);
// 								} else {
// 									var l;
// 									null == t ||
// 										null === (l = t.style) ||
// 										void 0 === l ||
// 										l.setProperty(
// 											"--content-max-height",
// 											0
// 										);
// 								}
// 								null == e ||
// 									null === (o = e[n]) ||
// 									void 0 === o ||
// 									null === (i = o.classList) ||
// 									void 0 === i ||
// 									i.add("max-height-set");
// 							}),
// 								this.setItemOverflowState(),
// 								this.setContentOpacity();
// 						}),
// 						h(this, "toggle", (t) => {
// 							var e, n, o, i, s, r, c, l, a;
// 							const d =
// 									null === (e = this.domNodes) ||
// 									void 0 === e ||
// 									null === (n = e.items) ||
// 									void 0 === n
// 										? void 0
// 										: n[t],
// 								h =
// 									null === (o = this.domNodes) ||
// 									void 0 === o ||
// 									null === (i = o.contents) ||
// 									void 0 === i
// 										? void 0
// 										: i[t],
// 								u =
// 									null == d ||
// 									null === (s = d.classList) ||
// 									void 0 === s
// 										? void 0
// 										: s.contains(this.openClass);
// 							null == d ||
// 								null === (r = d.classList) ||
// 								void 0 === r ||
// 								r.toggle(this.openClass);
// 							const p = u
// 								? 0
// 								: null === (c = this.domNodes) ||
// 								  void 0 === c ||
// 								  null === (l = c.contents) ||
// 								  void 0 === l ||
// 								  null === (a = l[t]) ||
// 								  void 0 === a
// 								? void 0
// 								: a.scrollHeight;
// 							var f;
// 							(null == d ||
// 								d.style.setProperty(
// 									"--content-max-height",
// 									`${p}px`
// 								),
// 							u)
// 								? null == h ||
// 								  null === (f = h.classList) ||
// 								  void 0 === f ||
// 								  f.add("overflow-hidden")
// 								: setTimeout(() => {
// 										var t;
// 										null == h ||
// 											null === (t = h.classList) ||
// 											void 0 === t ||
// 											t.remove("overflow-hidden");
// 								  }, 350);
// 						}),
// 						t &&
// 							!t.classList.contains(this.initClass) &&
// 							((this.container = t),
// 							(this.domNodes = queryDomNodes(
// 								this.selectors,
// 								this.container
// 							)),
// 							(this.options = Object.assign(
// 								{},
// 								this.defaultOptions,
// 								e
// 							)),
// 							(this.debouncedSetContentHeight = (function (t) {
// 								var e = this;
// 								let n,
// 									o =
// 										arguments.length > 1 &&
// 										void 0 !== arguments[1]
// 											? arguments[1]
// 											: 300;
// 								return function () {
// 									for (
// 										var i = arguments.length,
// 											s = new Array(i),
// 											r = 0;
// 										r < i;
// 										r++
// 									)
// 										s[r] = arguments[r];
// 									clearTimeout(n),
// 										(n = setTimeout(
// 											() => t.apply(e, s),
// 											o
// 										));
// 								};
// 							})(this.setContentHeight.bind(this), 300)),
// 							this.init());
// 				}
// 				init() {
// 					var t, e;
// 					null === (t = this.container) ||
// 						void 0 === t ||
// 						null === (e = t.style) ||
// 						void 0 === e ||
// 						e.setProperty(
// 							"--duration",
// 							` ${this.options.duration}ms`
// 						),
// 						(this.removeEvents = u({
// 							context: this.container,
// 							selector: this.selectors.buttons[0],
// 							handler: (t, e) => {
// 								e.classList.add("pointer-events-none");
// 								const n = this.domNodes.buttons.indexOf(e);
// 								this.toggle(n),
// 									setTimeout(() => {
// 										e.classList.remove(
// 											"pointer-events-none"
// 										);
// 									}, 350);
// 							},
// 						})),
// 						this.options.presetContentHeight
// 							? window.requestAnimationFrame(
// 									this.setContentHeight
// 							  )
// 							: (this.setItemOverflowState(),
// 							  this.setContentOpacity()),
// 						window.addEventListener(
// 							"resize",
// 							this.debouncedSetContentHeight
// 						),
// 						"function" == typeof this.options.callback &&
// 							this.options.callback(),
// 						this.container.classList.add(this.initClass);
// 				}
// 			}
// 			function f(t) {
// 				var e,
// 					n,
// 					o,
// 					i,
// 					s,
// 					r = [];
// 				for (
// 					e = document.getElementsByClassName("select-items"),
// 						n = document.getElementsByClassName("select-selected"),
// 						i = e.length,
// 						s = n.length,
// 						o = 0;
// 					o < s;
// 					o++
// 				)
// 					t == n[o]
// 						? r.push(o)
// 						: n[o].classList.remove("select-arrow-active");
// 				for (o = 0; o < i; o++)
// 					r.indexOf(o) && e[o].classList.add("select-hide");
// 			}
// 			document.addEventListener("click", f);
// 			var v = n(1179),
// 				m = n.n(v);
// 			!(function (t, n) {
// 				if ("string" != typeof t)
// 					throw new TypeError(
// 						"Theme Sections: The first argument for .register must be a string that specifies the type of the section being registered"
// 					);
// 				if (void 0 !== i[t])
// 					throw new Error(
// 						'Theme Sections: A section of type "' +
// 							t +
// 							'" has already been registered. You cannot register the same section type twice'
// 					);
// 				function o(t) {
// 					e.call(this, t, n);
// 				}
// 				(o.constructor = e),
// 					(o.prototype = Object.create(e.prototype)),
// 					(o.prototype.type = t),
// 					(i[t] = o);
// 			})("footer", {
// 				onLoad: function () {
// 					m().register("screen and (max-width: 767px)", {
// 						match: () => {
// 							var t;
// 							const e =
// 								null == this ||
// 								null === (t = this.container) ||
// 								void 0 === t
// 									? void 0
// 									: t.querySelector(".sf-footer__accordion");
// 							e &&
// 								(this.acc = new p(e, {
// 									presetContentHeight: !0,
// 								}));
// 						},
// 					}),
// 						(function (t) {
// 							let e, n, o, i, s, r, c, l, a, d, h;
// 							if (
// 								((e =
// 									t.getElementsByClassName(
// 										"sf__custom-select"
// 									)),
// 								(i = e.length),
// 								e.length > 0)
// 							)
// 								for (n = 0; n < i; n++) {
// 									var u;
// 									for (
// 										r =
// 											e[n].getElementsByTagName(
// 												"select"
// 											)[0],
// 											e[n].innerHTML = "",
// 											e[n].appendChild(r),
// 											s = r.length,
// 											c = document.createElement("DIV"),
// 											c.setAttribute(
// 												"class",
// 												"select-selected"
// 											),
// 											h = document.createElement("SPAN"),
// 											h.innerHTML =
// 												null ===
// 													(u =
// 														r.options[
// 															r.selectedIndex
// 														]) || void 0 === u
// 													? void 0
// 													: u.innerHTML,
// 											e[n].appendChild(c),
// 											c.appendChild(h),
// 											d = document.createElement("SPAN"),
// 											d.innerHTML =
// 												'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M441.9 167.3l-19.8-19.8c-4.7-4.7-12.3-4.7-17 0L224 328.2 42.9 147.5c-4.7-4.7-12.3-4.7-17 0L6.1 167.3c-4.7 4.7-4.7 12.3 0 17l209.4 209.4c4.7 4.7 12.3 4.7 17 0l209.4-209.4c4.7-4.7 4.7-12.3 0-17z"/></svg>',
// 											d.setAttribute(
// 												"class",
// 												"select-arrow"
// 											),
// 											c.appendChild(d),
// 											l = document.createElement("DIV"),
// 											l.setAttribute(
// 												"class",
// 												"select-items select-hide"
// 											),
// 											o = 0;
// 										o < s;
// 										o++
// 									)
// 										(a = document.createElement("DIV")),
// 											(a.innerHTML =
// 												r.options[o].innerHTML),
// 											r.options[o].getAttribute(
// 												"selected"
// 											) &&
// 												a.setAttribute(
// 													"class",
// 													"same-as-selected"
// 												),
// 											a.addEventListener(
// 												"click",
// 												function (t) {
// 													let e, n, o, i, s, r, c;
// 													for (
// 														i =
// 															this.parentNode.parentNode.getElementsByTagName(
// 																"select"
// 															)[0],
// 															r = i.length,
// 															s =
// 																this.parentNode
// 																	.previousSibling,
// 															n = 0;
// 														n < r;
// 														n++
// 													)
// 														if (
// 															i.options[n]
// 																.innerHTML ==
// 															this.innerHTML
// 														) {
// 															for (
// 																i.selectedIndex =
// 																	n,
// 																	s.childNodes[0].innerHTML =
// 																		this.innerHTML,
// 																	e =
// 																		this.parentNode.getElementsByClassName(
// 																			"same-as-selected"
// 																		),
// 																	c =
// 																		e.length,
// 																	o = 0;
// 																o < c;
// 																o++
// 															)
// 																e[
// 																	o
// 																].removeAttribute(
// 																	"class"
// 																);
// 															this.setAttribute(
// 																"class",
// 																"same-as-selected"
// 															);
// 															break;
// 														}
// 													i.dispatchEvent(
// 														new Event("change")
// 													),
// 														i.dispatchEvent(
// 															new Event("click")
// 														),
// 														s.click();
// 												}
// 											),
// 											l.appendChild(a);
// 									e[n].appendChild(l),
// 										c.addEventListener(
// 											"click",
// 											function (t) {
// 												t.stopPropagation(),
// 													f(this),
// 													this.nextSibling.classList.toggle(
// 														"select-hide"
// 													),
// 													this.classList.toggle(
// 														"select-arrow-active"
// 													);
// 											}
// 										);
// 								}
// 						})(this.container);
// 				},
// 			}),
// 				r("footer");
// 		})();
// })();
